{"version":3,"sources":["../package.json","../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts","../src/cli.ts"],"sourcesContent":["{\n  \"name\": \"@repo/zod-prisma\",\n  \"version\": \"0.0.0\",\n  \"description\": \"A Prisma generator that creates Zod schemas and client extensions for your Prisma models.\",\n  \"bin\": {\n    \"zod-prisma\": \"bin/cli.js\"\n  },\n  \"main\": \"bin/cli.js\",\n  \"scripts\": {\n    \"clean\": \"rm -rf dist && rm -rf node_modules\",\n    \"clean:deploy\": \"rm -rf node_modules && rm -rf coverage && rm -rf test\",\n    \"generate\": \"tsup\",\n    \"format\": \"prettier --write .\",\n    \"lint\": \"oxlint . --max-warnings 0\",\n    \"postinstall\": \"tsup\"\n  },\n  \"dependencies\": {\n    \"@prisma/generator-helper\": \"^6.3.0\",\n    \"@repo/lint-config\": \"workspace:*\",\n    \"@repo/prettier-config\": \"workspace:*\",\n    \"@repo/typescript-config\": \"workspace:*\",\n    \"@types/node\": \"^22.12.0\",\n    \"oxlint\": \"^0.16.8\",\n    \"parenthesis\": \"^3.1.8\",\n    \"prettier\": \"^3.2.5\",\n    \"ts-morph\": \"^25.0.0\",\n    \"tsup\": \"^8.3.6\",\n    \"typescript\": \"5.5.4\",\n    \"zod\": \"^3.24.1\"\n  }\n}\n","import { z } from 'zod';\n\nconst configBoolean = z\n  .enum(['true', 'false'])\n  .transform(arg => JSON.parse(arg));\n\nexport const configSchema = z.object({\n  relationModel: configBoolean.default('true').or(z.literal('default')),\n  modelSuffix: z.string().default('Model'),\n  modelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n  useDecimalJs: configBoolean.default('false'),\n  imports: z.string().optional(),\n  prismaJsonNullability: configBoolean.default('true'),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nexport type PrismaOptions = {\n  schemaPath: string;\n  outputPath: string;\n  clientPath: string;\n};\n\nexport type Names = {\n  model: string;\n  related: string;\n};\n","import { DMMF } from '@prisma/generator-helper';\nimport type { CodeBlockWriter } from 'ts-morph';\nimport { Config } from './config';\n\nexport const writeArray = (\n  writer: CodeBlockWriter,\n  array: string[],\n  newLine = true,\n) => array.forEach(line => writer.write(line).conditionalNewLine(newLine));\n\nexport const useModelNames = ({\n  modelCase,\n  modelSuffix,\n  relationModel,\n}: Config) => {\n  const formatModelName = (name: string, prefix = '') => {\n    if (modelCase === 'camelCase') {\n      name = name.slice(0, 1).toLowerCase() + name.slice(1);\n    }\n    return `${prefix}${name}${modelSuffix}`;\n  };\n\n  return {\n    modelName: (name: string) =>\n      formatModelName(name, relationModel === 'default' ? '_' : ''),\n    relatedModelName: (\n      name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg,\n    ) =>\n      formatModelName(\n        relationModel === 'default'\n          ? name.toString()\n          : `Related${name.toString()}`,\n      ),\n  };\n};\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n  model.fields.some(field => field.kind === 'object') &&\n  config.relationModel !== false;\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n  return input.reduce((arr, item, idx) => {\n    return idx % size === 0\n      ? [...arr, [item]]\n      : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];\n  }, []);\n};\n\nexport const dotSlash = (input: string) => {\n  const converted = input\n    .replace(/^\\\\\\\\\\?\\\\/, '')\n    .replace(/\\\\/g, '/')\n    .replace(/\\/\\/+/g, '/');\n\n  if (converted.includes(`/node_modules/`))\n    return converted.split(`/node_modules/`).slice(-1)[0];\n\n  if (converted.startsWith(`../`)) return converted;\n\n  return './' + converted;\n};\n","import { ArrayTree, parse, stringify } from 'parenthesis';\nimport { chunk } from './util';\n\nexport const getJSDocs = (docString?: string) => {\n  const lines: string[] = [];\n\n  if (docString) {\n    const docLines = docString\n      .split('\\n')\n      .filter(dL => !dL.trimStart().startsWith('@zod'));\n\n    if (docLines.length) {\n      lines.push('/**');\n      docLines.forEach(dL => lines.push(` * ${dL}`));\n      lines.push(' */');\n    }\n  }\n\n  return lines;\n};\n\nexport const getZodDocElements = (docString: string) =>\n  docString\n    .split('\\n')\n    .filter(line => line.trimStart().startsWith('@zod'))\n    .map(line => line.trimStart().slice(4))\n    .flatMap(line =>\n      // Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n      chunk(parse(line), 2)\n        .slice(0, -1)\n        .map(\n          ([each, contents]) =>\n            (each as string).replace(/\\)?\\./, '') +\n            `${stringify(contents as ArrayTree)})`,\n        ),\n    );\n\nexport const computeCustomSchema = (docString: string) => {\n  return getZodDocElements(docString)\n    .find(modifier => modifier.startsWith('custom('))\n    ?.slice(7)\n    .slice(0, -1);\n};\n\nexport const computeModifiers = (docString: string) => {\n  return getZodDocElements(docString).filter(\n    each => !each.startsWith('custom('),\n  );\n};\n","import type { DMMF } from '@prisma/generator-helper';\nimport { computeCustomSchema, computeModifiers } from './docs';\n\nexport const getZodConstructor = (\n  field: DMMF.Field,\n  getRelatedModelName = (name: string) => name.toString(),\n) => {\n  let zodType = 'z.unknown()';\n  let extraModifiers: string[] = [''];\n  if (field.kind === 'scalar') {\n    switch (field.type) {\n      case 'String':\n        zodType = 'z.string()';\n        break;\n      case 'Int':\n        zodType = 'z.number()';\n        extraModifiers.push('int()');\n        break;\n      case 'BigInt':\n        zodType = 'z.bigint()';\n        break;\n      case 'DateTime':\n        zodType = 'z.date()';\n        break;\n      case 'Float':\n        zodType = 'z.number()';\n        break;\n      case 'Decimal':\n        zodType = 'z.number()';\n        break;\n      case 'Json':\n        zodType = 'z.object({}).partial().passthrough()';\n        break;\n      case 'Boolean':\n        zodType = 'z.boolean()';\n        break;\n      // TODO: Proper type for bytes fields\n      case 'Bytes':\n        zodType = 'z.unknown()';\n        break;\n    }\n  } else if (field.kind === 'enum') {\n    zodType = `z.nativeEnum(${field.type})`;\n  } else if (field.kind === 'object') {\n    zodType = getRelatedModelName(field.type);\n  }\n\n  if (field.isList) extraModifiers.push('array()');\n  if (field.documentation) {\n    zodType = computeCustomSchema(field.documentation) ?? zodType;\n    extraModifiers.push(...computeModifiers(field.documentation));\n  }\n  if (!field.isRequired && field.type !== 'Json')\n    extraModifiers.push('nullable()');\n  // if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n  return `${zodType}${extraModifiers.join('.')}`;\n};\n","import path from 'path';\nimport { DMMF } from '@prisma/generator-helper';\nimport {\n  ImportDeclarationStructure,\n  SourceFile,\n  StructureKind,\n  VariableDeclarationKind,\n} from 'ts-morph';\nimport { Config, PrismaOptions } from './config';\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util';\nimport { getJSDocs } from './docs';\nimport { getZodConstructor } from './types';\n\nexport const writeImportsForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  { schemaPath, outputPath, clientPath }: PrismaOptions,\n) => {\n  const importSet: Set<ImportDeclarationStructure> = new Set([\n    {\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'z',\n      moduleSpecifier: 'zod',\n    },\n  ]);\n\n  if (config.imports) {\n    importSet.add({\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'imports',\n      moduleSpecifier: dotSlash(\n        path.relative(\n          outputPath,\n          path.resolve(path.dirname(schemaPath), config.imports),\n        ),\n      ),\n    });\n  }\n\n  if (config.useDecimalJs && model.fields.some(f => f.type === 'Decimal')) {\n    importSet.add({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['Decimal'],\n      moduleSpecifier: 'decimal.js',\n    });\n  }\n\n  const enumFields = model.fields.filter(f => f.kind === 'enum');\n  const enumSet = new Set(enumFields.map(f => f.type));\n\n  // const relationFields = model.fields.filter(f => f.kind === 'object');\n  const relativePath = path.relative(`${outputPath}/models`, clientPath);\n\n  if (enumFields.length > 0) {\n    importSet.add({\n      kind: StructureKind.ImportDeclaration,\n      isTypeOnly: enumFields.length === 0,\n      moduleSpecifier: dotSlash(relativePath),\n      namedImports: Array.from(enumSet).map(enumName => enumName),\n    });\n  }\n\n  // if (relationFields.length > 0) {\n  //   importSet.push({\n  //     kind: StructureKind.ImportDeclaration,\n  //     moduleSpecifier: './index',\n  //     namedImports: Array.from(\n  //       new Set(relationFields.map(f => modelName(f.type))),\n  //     ),\n  //   });\n  // }\n\n  const importList = Array.from(importSet);\n\n  importList.forEach(importDeclaration => {\n    const importExists = sourceFile.getImportDeclaration(\n      existingDeclaration => {\n        return (\n          existingDeclaration.getModuleSpecifierValue() ===\n          importDeclaration.moduleSpecifier\n        );\n      },\n    );\n\n    if (!importExists) {\n      sourceFile.addImportDeclaration(importDeclaration);\n    }\n  });\n};\n\nexport const writeTypeSpecificSchemas = (\n  model: DMMF.Model,\n  types: DMMF.Model[],\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions,\n) => {\n  const relationFields = model.fields.filter(f => f.kind === 'object');\n  const relatedModels = new Set(\n    relationFields.map(f => types.find(m => m.name === f.type)),\n  );\n\n  relatedModels.forEach(relatedModel => {\n    if (!relatedModel) return;\n    writeTypeSpecificSchemas(\n      relatedModel,\n      types,\n      sourceFile,\n      config,\n      _prismaOptions,\n    );\n    writeImportsForModel(relatedModel, sourceFile, config, _prismaOptions);\n    generateSchemaForModel(relatedModel, sourceFile, config, _prismaOptions);\n  });\n};\n\nexport const generateSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions,\n) => {\n  const { modelName } = useModelNames(config);\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    leadingTrivia: writer => writer.blankLineIfLastNot(),\n    declarations: [\n      {\n        name: modelName(model.name),\n        initializer(writer) {\n          writer\n            .write('z.object(')\n            .inlineBlock(() => {\n              model.fields\n                .filter(f => !f?.relationName)\n                .forEach(field => {\n                  writeArray(writer, getJSDocs(field.documentation));\n                  writer\n                    .write(\n                      `${field.name}: ${getZodConstructor(field, modelName)}`,\n                    )\n                    .write(',')\n                    .newLine();\n                });\n            })\n            .write(')');\n        },\n      },\n    ],\n  });\n};\n\nexport const generateRelatedSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions,\n) => {\n  const { modelName, relatedModelName } = useModelNames(config);\n\n  const relationFields = model.fields.filter(f => f.kind === 'object');\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}`,\n    isExported: true,\n    extends: [`z.infer<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map(f => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n    })),\n  });\n\n  sourceFile.addStatements(writer =>\n    writeArray(writer, [\n      '',\n      '/**',\n      ` * ${relatedModelName(\n        model.name,\n      )} contains all relations on your model in addition to the scalars`,\n      ' *',\n      ' * NOTE: Lazy required in case of potential circular dependencies within schema',\n      ' */',\n    ]),\n  );\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    declarations: [\n      {\n        name: relatedModelName(model.name),\n        type: `z.ZodSchema<Complete${model.name}>`,\n        initializer(writer) {\n          writer\n            .write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n            .inlineBlock(() => {\n              relationFields.forEach(field => {\n                writeArray(writer, getJSDocs(field.documentation));\n\n                writer\n                  .write(\n                    `${field.name}: ${getZodConstructor(\n                      field,\n                      relatedModelName,\n                    )}`,\n                  )\n                  .write(',')\n                  .newLine();\n              });\n            })\n            .write('))');\n        },\n      },\n    ],\n  });\n};\n\nexport const populateModelFile = (\n  model: DMMF.Model,\n  types: DMMF.Model[],\n  sourceFile: SourceFile,\n  config: Config,\n  prismaOptions: PrismaOptions,\n) => {\n  writeImportsForModel(model, sourceFile, config, prismaOptions);\n  writeTypeSpecificSchemas(model, types, sourceFile, config, prismaOptions);\n  generateSchemaForModel(model, sourceFile, config, prismaOptions);\n  if (needsRelatedModel(model, config))\n    generateRelatedSchemaForModel(model, sourceFile, config, prismaOptions);\n};\n\nexport const generateBarrelFile = (\n  models: readonly { name: string }[],\n  indexFile: SourceFile,\n) => {\n  models.forEach(model =>\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${model.name.toLowerCase()}`,\n    }),\n  );\n};\n\nexport const generateClientExtensionFile = (\n  models: readonly DMMF.Model[],\n  config: Config,\n  clientFile: SourceFile,\n) => {\n  const { modelName } = useModelNames(config);\n  const modelImports = models.map(model => modelName(model.name)).join(', ');\n  clientFile.addStatements(writer => {\n    writer.newLine();\n    writeArray(writer, [\n      `import { type PrismaClient } from \"../client\";\n      import { ${modelImports} } from '../models';\n      \n      /**\n       * Prisma Client Extension\n       */\n      export const clientExtension: Parameters<PrismaClient['$extends']>[0] = {\n        query: {`,\n    ]);\n  });\n\n  models.forEach(model => {\n    const mName = modelName(model.name);\n    const camelCaseName =\n      model.name.charAt(0).toLowerCase() + model.name.slice(1);\n    clientFile.addStatements(writer => {\n      writer.newLine();\n      writeArray(writer, [\n        ` ${camelCaseName}: {\n              create({ args, query }) {\n                args.data = ${mName}.omit({ id: true, createdAt: true, updatedAt: true }).parse(args.data);\n                return query(args);\n            },\n              update({ args, query }) {\n                args.data = ${mName}.partial().parse(args.data);\n                return query(args);\n              },\n              updateMany({ args, query }) {\n                args.data = ${mName}.partial().parse(args.data);\n                return query(args);\n              },\n              upsert({ args, query }) {\n                args.create = ${mName}.omit({ id: true, createdAt: true, updatedAt: true }).parse(args.create);\n                args.update = ${mName}.partial().parse(args.update);\n                return query(args);\n              },\n            },`,\n      ]);\n    });\n  });\n\n  clientFile.addStatements(writer => {\n    writeArray(writer, [\n      `  },\n       };\n      `,\n    ]);\n  });\n};\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json';\n\nimport { generatorHandler } from '@prisma/generator-helper';\nimport { SemicolonPreference } from 'typescript';\nimport { configSchema, PrismaOptions } from './config';\nimport {\n  populateModelFile,\n  generateBarrelFile,\n  generateClientExtensionFile,\n} from './generator';\nimport { Project } from 'ts-morph';\n\ngeneratorHandler({\n  onManifest() {\n    return {\n      version,\n      prettyName: 'Zod Schemas',\n      defaultOutput: 'zod',\n    };\n  },\n  onGenerate(options) {\n    const project = new Project();\n\n    const models = options.dmmf.datamodel.models;\n    const types = options.dmmf.datamodel.types;\n\n    const { schemaPath } = options;\n    const outputPath = options.generator.output!.value ?? './zod';\n    const clientPath = options.otherGenerators.find(\n      each => each.provider.value === 'prisma-client-js',\n    )!.output!.value!;\n\n    const results = configSchema.safeParse(options.generator.config);\n    if (!results.success)\n      throw new Error(\n        'Incorrect config provided. Please check the values you provided and try again.',\n      );\n\n    const config = results.data;\n    const prismaOptions: PrismaOptions = {\n      clientPath,\n      outputPath,\n      schemaPath,\n    };\n\n    const modelIndexFile = project.createSourceFile(\n      `${outputPath}/models/index.ts`,\n      {},\n      { overwrite: true },\n    );\n\n    generateBarrelFile(models, modelIndexFile);\n\n    modelIndexFile.formatText({\n      indentSize: 2,\n      convertTabsToSpaces: true,\n      semicolons: SemicolonPreference.Remove,\n    });\n\n    const clientExtensionFile = project.createSourceFile(\n      `${outputPath}/clientExtension/index.ts`,\n      {},\n      { overwrite: true },\n    );\n\n    generateClientExtensionFile(models, config, clientExtensionFile);\n\n    clientExtensionFile.formatText({\n      indentSize: 2,\n      convertTabsToSpaces: true,\n      semicolons: SemicolonPreference.Remove,\n    });\n\n    models.forEach(model => {\n      const sourceFile = project.createSourceFile(\n        `${outputPath}/models/${model.name.toLowerCase()}.ts`,\n        {},\n        { overwrite: true, scriptKind: 0 },\n      );\n\n      populateModelFile(model, types as any, sourceFile, config, prismaOptions);\n\n      sourceFile.formatText({\n        indentSize: 2,\n        convertTabsToSpaces: true,\n        semicolons: SemicolonPreference.Remove,\n      });\n    });\n\n    return project.save();\n  },\n});\n","#!/usr/bin/env node\n\nrequire('./');\n"],"mappings":"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","names":["configBoolean","configSchema","z","enum","transform","arg","JSON","parse","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","useModelNames","needsRelatedModel","chunk","dotSlash","writer","array","newLine","forEach","line","write","conditionalNewLine","modelCase","modelSuffix","relationModel","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","model","config","fields","some","field","kind","input","size","reduce","arr","item","idx","converted","replace","includes","split","startsWith","getJSDocs","getZodDocElements","computeCustomSchema","computeModifiers","docString","lines","docLines","split","filter","dL","trimStart","startsWith","length","push","forEach","line","map","slice","flatMap","chunk","parse","each","contents","replace","stringify","find","modifier","getZodConstructor","field","getRelatedModelName","name","toString","zodType","extraModifiers","kind","type","push","isList","documentation","computeCustomSchema","computeModifiers","isRequired","join","writeImportsForModel","writeTypeSpecificSchemas","generateSchemaForModel","generateRelatedSchemaForModel","populateModelFile","generateBarrelFile","generateClientExtensionFile","model","sourceFile","config","schemaPath","outputPath","clientPath","importSet","Set","kind","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","imports","add","dotSlash","path","relative","resolve","dirname","useDecimalJs","fields","some","f","type","namedImports","enumFields","filter","enumSet","map","relativePath","length","isTypeOnly","Array","from","enumName","importList","forEach","importDeclaration","importExists","getImportDeclaration","existingDeclaration","getModuleSpecifierValue","addImportDeclaration","types","_prismaOptions","relationFields","relatedModels","find","m","name","relatedModel","modelName","useModelNames","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","writer","blankLineIfLastNot","declarations","initializer","write","inlineBlock","relationName","field","writeArray","getJSDocs","documentation","getZodConstructor","newLine","relatedModelName","addInterface","extends","properties","hasQuestionToken","isRequired","isList","addStatements","prismaOptions","needsRelatedModel","models","indexFile","addExportDeclaration","toLowerCase","clientFile","modelImports","join","mName","camelCaseName","charAt","slice","import_ts_morph","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","models","dmmf","datamodel","types","schemaPath","outputPath","generator","output","value","clientPath","otherGenerators","find","each","provider","results","configSchema","safeParse","config","success","Error","data","prismaOptions","modelIndexFile","createSourceFile","overwrite","generateBarrelFile","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","clientExtensionFile","generateClientExtensionFile","forEach","model","sourceFile","name","toLowerCase","scriptKind","populateModelFile","save","require"]}